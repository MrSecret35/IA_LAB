/*
ric_prof_lim([(S,G,H, Cammino)| Open], Closed, Risultato):-
    azione applicabile
    nuovo stato SNuovo
    calcolo costo nuovo stato G*1 + New_H
    controllo se esiste nella lista closed
        se esiste controllo se il costo Ã¨ minore 
            se minore lo riapro
    se non esiste -> Marcare come aperto SNuovo
    agigungo SNuovo agli stati aperti in ordine crescente
    aggiungo S alla lista dei Closed
    andiamo al prossimo stato minore 
*/

/*
ricercaAStar([(S,G,H, Cammino)| Open], Closed, Risultato):-
    applicabile(Az,S),
    trasforma(Az,S,SNuovo),
    euristica(SNuovo,HNuovo),
    %CostoSNuovo is G+1+HNuovo,
    \+ member(SNuovo,Closed),
    %aggiungi((Snuovo,G+1,HNuovo,[Az|Cammino]), Open, ListaNuova),
    %ric_prof_lim(ListaNuova, [(S,G,H, Cammino)| Closed], Risultato).
    ricercaAStar([(SNuovo,G+1,HNuovo,[Az|Cammino]) | Open], [(S,G,H, Cammino)| Closed], Risultato).

ricercaAStar([(S,G,H, Cammino)| Open], Closed, Risultato):-
    applicabile(Az,S),
    trasforma(Az,S,SNuovo),
    euristica(SNuovo,HNuovo),
    CostoSNuovo is G+1+HNuovo,
    member(SNuovo,Closed),
    restituisci(SNuovo,Closed,(SNuovo,GSNuovo,HSNUovo,_)),
    CostoSNuovoS is GSNuovo + HSNUovo,
    CostoSNuovo<CostoSNuovoS,
    %aggiungi((Snuovo,G+1,HNuovo,[Az|Cammino]), Open, ListaNuova),
    %ric_prof_lim(ListaNuova, [(S,G,H, Cammino)| Closed], Risultato).
    ricercaAStar([(SNuovo,G+1,HNuovo,[Az|Cammino]) | Open], [(S,G,H, Cammino)| Closed], Risultato).
*/